{"version":3,"file":"bundle.js","sources":["../src/12_basic/index.ts"],"sourcesContent":["// 装饰器 就是一个函数，只能在类中使用\n// 类本身，类的成员使用\n\n/**\n * 装饰器的分类\n * \n * 1. 类的装饰器\n * 2. 方法装饰器\n * 3. 属性装饰器\n * 4. 访问装饰器\n * 5. 参数装饰器\n */\n\n// experimentalDecorators: true 需要开启\n// 1. 类的装饰器 \n// 给类进行拓展，也可以返回一个子类重写父类, 一般不会通过类装饰器去拓展类的属性和方法，因为拓展后原来没有的方法无法访问到\n// 可以使用 namespace\n\n// const classDecoration = <T extends new (...args: any[]) => any>(target: T) => {\n//   // (target as any).type = '动物';\n//   // (target as any).getType = function () {\n//   //   return this.type;\n//   // }\n\n//   // Object.assign(target.prototype, {\n//   //   eat () {},\n//   //   drink () {}\n//   // })\n// }\n\nfunction OverrideAnimal (target: any) {\n  return class extends target {\n    eat () {\n      super.eat();\n      console.log('new eat');\n    }\n  }\n}\n\ninterface Animal {\n  eat(): void;\n  drink(): void;\n}\n\n// @classDecoration\n// @OverrideAnimal\nclass Animal {\n  eat () {\n    console.log('动物 original');\n  }\n}\n\nconst animal = new Animal();\n// animal.eat();\n// animal.drink();\n\n// 方法装饰器\nconsole.log(animal);\n\n"],"names":[],"mappings":";;;;;EA4CA;EACA;EACA,MAAM,MAAM,CAAA;MACV,GAAG,GAAA;EACD,QAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;OAC5B;EACF,CAAA;EAED,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;EAC5B;EACA;EAEA;EACA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;;;;;;"}