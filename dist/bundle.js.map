{"version":3,"file":"bundle.js","sources":["../src/3_basic/index.ts"],"sourcesContent":["// 以赋予值的结果来进行 内容推导\n\n// let name = 'xulei';\n// let age = 10;\n\n// let const\n// const age = 30; // 如果用常量，来自动推导类型就是字面类型\n\n// let name: string | number;\n\n// 默认没有赋值的时候，联合类型可以调用公共的方法, why？ 为了安全\n// name = 'xulei';\n// name.toUpperCase()\n\n// name = 123; // 赋值后会推导类型\n// name.toFixed(2);\n\n// 字面量类型\n// type Direction  = 'up' | 'down' | 'left' | 'right';\n// let dir:Direction = 'up';\n\n\n// type 中定义了使类型， 不是对象\n// type women = {\n//   wealthy: true;\n//   waste: string;\n// } | {\n//   wealthy: false;\n//   normality: string;\n// }\n\n// 可以利用联合类型来做到属性之间的互斥\n// let richWomen: women = {\n//   wealthy: true,\n//   waste: '浪费'\n// }\n\n// let  poorWomen: women = {\n//   wealthy: false,\n//   normality:'节俭'\n// }\n\n// 类型断言(非空断言 这个值一定不为空)\nlet ele = document.getElementById('app');\nele!.innerText = '1234';\n\n// ? js 可选链操作符\n\nexport {};"],"names":[],"mappings":";;;CAAA;CAEA;CACA;CAEA;CACA;CAEA;CAEA;CACA;CACA;CAEA;CACA;CAEA;CACA;CACA;CAGA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CAEA;CACA;CACA;CACA;CACA;CAEA;CACA;CACA;CACA;CAEA;CACA,IAAI,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;CACzC,GAAI,CAAC,SAAS,GAAG,MAAM;;;;;;"}